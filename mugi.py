#Implementacion de mugi
import copy
import sys

args = sys.argv[1:]


if len(args)==0:
	print("No ingreso la Key\nUSO:\n->python mugy.py key iv  (retorna los primeros 16 numeros de la serie) \n->python mugy.py key iv archivoAEnctriptar/DesEncriptar OpcionalHeaderOffset\n(retorna archivo encriptado/desenctriptado) ")
	exit()

if len(args)==1:
	print("No ingreso iv \nUSO:\n->python mugy.py key iv  (retorna los primeros 16 numeros de la serie) \n->python mugy.py key iv archivoAEnctriptar/DesEncriptar OpcionalHeaderOffset\n(retorna archivo encriptado/desenctriptado) ")
	exit()

k=int(args[0])
i=int(args[1])

a=[0,0,0]
b=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]

sBox = [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
                               0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
                               0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
                               0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
                               0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
                               0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
                               0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
                               0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
                               0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
                               0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
                               0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
                               0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
                               0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
                               0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
                               0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
                               0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16]


mul2 = [0x00, 0x02, 0x04, 0x06, 0x08, 0x0a, 0x0c, 0x0e, 0x10, 0x12, 0x14, 0x16, 0x18, 0x1a, 0x1c, 0x1e,
                               0x20, 0x22, 0x24, 0x26, 0x28, 0x2a, 0x2c, 0x2e, 0x30, 0x32, 0x34, 0x36, 0x38, 0x3a, 0x3c, 0x3e,
                               0x40, 0x42, 0x44, 0x46, 0x48, 0x4a, 0x4c, 0x4e, 0x50, 0x52, 0x54, 0x56, 0x58, 0x5a, 0x5c, 0x5e,
                               0x60, 0x62, 0x64, 0x66, 0x68, 0x6a, 0x6c, 0x6e, 0x70, 0x72, 0x74, 0x76, 0x78, 0x7a, 0x7c, 0x7e,
                               0x80, 0x82, 0x84, 0x86, 0x88, 0x8a, 0x8c, 0x8e, 0x90, 0x92, 0x94, 0x96, 0x98, 0x9a, 0x9c, 0x9e,
                               0xa0, 0xa2, 0xa4, 0xa6, 0xa8, 0xaa, 0xac, 0xae, 0xb0, 0xb2, 0xb4, 0xb6, 0xb8, 0xba, 0xbc, 0xbe,
                               0xc0, 0xc2, 0xc4, 0xc6, 0xc8, 0xca, 0xcc, 0xce, 0xd0, 0xd2, 0xd4, 0xd6, 0xd8, 0xda, 0xdc, 0xde,
                               0xe0, 0xe2, 0xe4, 0xe6, 0xe8, 0xea, 0xec, 0xee, 0xf0, 0xf2, 0xf4, 0xf6, 0xf8, 0xfa, 0xfc, 0xfe,
                               0x1b, 0x19, 0x1f, 0x1d, 0x13, 0x11, 0x17, 0x15, 0x0b, 0x09, 0x0f, 0x0d, 0x03, 0x01, 0x07, 0x05,
                               0x3b, 0x39, 0x3f, 0x3d, 0x33, 0x31, 0x37, 0x35, 0x2b, 0x29, 0x2f, 0x2d, 0x23, 0x21, 0x27, 0x25,
                               0x5b, 0x59, 0x5f, 0x5d, 0x53, 0x51, 0x57, 0x55, 0x4b, 0x49, 0x4f, 0x4d, 0x43, 0x41, 0x47, 0x45,
                               0x7b, 0x79, 0x7f, 0x7d, 0x73, 0x71, 0x77, 0x75, 0x6b, 0x69, 0x6f, 0x6d, 0x63, 0x61, 0x67, 0x65,
                               0x9b, 0x99, 0x9f, 0x9d, 0x93, 0x91, 0x97, 0x95, 0x8b, 0x89, 0x8f, 0x8d, 0x83, 0x81, 0x87, 0x85,
                               0xbb, 0xb9, 0xbf, 0xbd, 0xb3, 0xb1, 0xb7, 0xb5, 0xab, 0xa9, 0xaf, 0xad, 0xa3, 0xa1, 0xa7, 0xa5,
                               0xdb, 0xd9, 0xdf, 0xdd, 0xd3, 0xd1, 0xd7, 0xd5, 0xcb, 0xc9, 0xcf, 0xcd, 0xc3, 0xc1, 0xc7, 0xc5,
                               0xfb, 0xf9, 0xff, 0xfd, 0xf3, 0xf1, 0xf7, 0xf5, 0xeb, 0xe9, 0xef, 0xed, 0xe3, 0xe1, 0xe7, 0xe5];


C0 = 0x6A09E667F3BCC908;
C1 = 0xBB67AE8584CAA73B;
C2 = 0x3C6EF372FE94F82B;



def dameByte(target, n):
	return ((target&((0xFF<<(8*n))))>>(8*n))

def dameInt(target, n):
	return ((target&((0xFFFFFFFF<<(32*n))))>>(32*n))


def dame64(target,n):
	return ((target&((0xFFFFFFFFFFFFFFFF<<(64*n))))>>(64*n))

def box(valor):
	return sBox[valor]


def box32(valor):
	return box(dameByte(valor,0))+(box(dameByte(valor,1))<<8)+(box(dameByte(valor,2))<<16)+(box(dameByte(valor,3))<<24)


def M(valor):   
	retorno = mul2[dameByte(valor,3)]^mul2[dameByte(valor,2)]^dameByte(valor,2)^dameByte(valor,1)^(dameByte(valor,0))
	retorno += ((mul2[dameByte(valor,2)]^mul2[dameByte(valor,1)]^dameByte(valor,1)^dameByte(valor,0)^(dameByte(valor,3)))<<8)
	retorno += ((mul2[dameByte(valor,1)]^mul2[dameByte(valor,0)]^dameByte(valor,0)^dameByte(valor,3)^(dameByte(valor,2)))<<16)
	retorno += ((mul2[dameByte(valor,0)]^mul2[dameByte(valor,3)]^dameByte(valor,3)^dameByte(valor,2)^(dameByte(valor,1)))<<24)
	return retorno


def F(buffer2,valor):
	temp=buffer2^valor
	preRetorno = M(box32(dameInt(temp,0))) + ((M(box32(dameInt(temp,1))))<<32)
	retorno= (dameByte(preRetorno,0)<<(8*7))+(dameByte(preRetorno,1)<<(8*6))+(dameByte(preRetorno,2)<<(8*1))+(dameByte(preRetorno,3)<<(8*0))+(dameByte(preRetorno,4)<<(8*3))+(dameByte(preRetorno,5)<<(8*2))+(dameByte(preRetorno,6)<<(8*5))+(dameByte(preRetorno,7)<<(8*4))
	retorno2 =dameByte(preRetorno,0)+(dameByte(preRetorno,1)<<8)+(dameByte(preRetorno,2)<<(8*6))+(dameByte(preRetorno,3)<<(8*7))+(dameByte(preRetorno,4)<<(8*4))+(dameByte(preRetorno,5)<<(8*5))+(dameByte(preRetorno,6)<<(8*2))+(dameByte(preRetorno,7)<<(8*3))
	return retorno 

def rotR(num,rot):	
	num=num<<rot
	temp=num
	num=num&0xFFFFFFFFFFFFFFFF
	temp=temp>>64
	return temp+num

def rotL(num,rot):
	num=num<<64
	num=num>>rot
	temp=num	
	temp=temp&0xFFFFFFFFFFFFFFFF0000000000000000
	temp = temp>>64
	num=num&0xFFFFFFFFFFFFFFFF
	return temp+num

def rho(b,a):
	at = range(0,3)
	at[1]=F(b[4],a[1])^a[2]^C1
	at[2]=(F(rotR(b[10],17),a[1]))^a[0]^C2
	at[0]=a[1]
	return at


def Lambda(b,a):
	btemp = copy.copy(b)
	for x in range(1, 16):
		btemp[x]=b[x-1]
	btemp[0]=b[15]^a[0]
	btemp[4]=b[3]^b[7]
	btemp[10]=b[9]^(rotR(b[13],32))
	return btemp


def update(a,b):
	atemp = copy.copy(a)
	btemp = copy.copy(b)
	a = rho(btemp,atemp)
	b = Lambda(btemp,atemp)	
	return a,b 


a[0]=dame64(k,0)
a[1]=dame64(k,1)
a[2]=rotR(dame64(k,0),7)^rotL(dame64(k,1),7)^C0

btemp = copy.copy(b)
for x in range(0, 16):
	a=rho(btemp,a)
	b[15-x]=a[0]

a[0]=a[0]^dame64(i,0)
a[1]=a[1]^dame64(i,1)
a[2]=a[2]^rotR(dame64(i,0),7)^rotL(dame64(i,1),7)^C0

for x in range(0, 16):
	a=rho(btemp,a)

for x in range(0, 16):
	a,b=update(a,b)




if len(args)==3:
	c = bytearray(open(args[2], 'rb').read())
	for i in range(len(c)):
		c[i] ^= dameByte(a[2],7-i%8)
    	if i%8==7:
    		a,b=update(a,b)
	open(args[2], 'wb').write(c)
elif len(args)==4:
	c = bytearray(open(args[2], 'rb').read())
	for i in range(len(c)-int(args[3])):
		c[i+int(args[3])] ^= dameByte(a[2],7-i%8)
		if (i%8)==7:
			a,b=update(a,b)
	open(args[2], 'wb').write(c)
else:
	for x in range(0, 100):
		print(hex(a[2]))	
		a,b=update(a,b)

